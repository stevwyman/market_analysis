# Generated by Django 4.1.7 on 2023-05-02 17:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Manager"), (2, "Premium"), (3, "Basic")],
                        default=3,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="DataProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=24)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Security",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("symbol", models.CharField(max_length=12)),
                ("wkn", models.CharField(max_length=12)),
                ("isin", models.CharField(max_length=24)),
                ("type", models.CharField(max_length=24)),
                ("industry", models.CharField(max_length=255)),
                ("sector", models.CharField(max_length=255)),
                ("country", models.CharField(max_length=255)),
                ("exchange", models.CharField(max_length=32)),
                ("currency", models.CharField(max_length=6)),
                ("currency_symbol", models.CharField(max_length=6)),
                (
                    "data_provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.dataprovider",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WeeklyUpdate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(auto_now_add=True)),
                (
                    "security",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_%(app_label)s",
                        to="data.security",
                    ),
                ),
            ],
            options={
                "ordering": ["security"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Weekly",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("open_price", models.DecimalField(decimal_places=6, max_digits=16)),
                ("high_price", models.DecimalField(decimal_places=6, max_digits=16)),
                ("low", models.DecimalField(decimal_places=6, max_digits=16)),
                ("close", models.DecimalField(decimal_places=6, max_digits=16)),
                ("adj_close", models.DecimalField(decimal_places=6, max_digits=16)),
                ("volume", models.PositiveIntegerField()),
                (
                    "security",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_%(app_label)s",
                        to="data.security",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Watchlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("OU", "only by user"),
                            ("AP", "for all premium user"),
                            ("AU", "for all user"),
                        ],
                        default="OU",
                        max_length=2,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "securities",
                    models.ManyToManyField(
                        related_name="watchlists", to="data.security"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MonthlyUpdate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(auto_now_add=True)),
                (
                    "security",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_%(app_label)s",
                        to="data.security",
                    ),
                ),
            ],
            options={
                "ordering": ["security"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Monthly",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("open_price", models.DecimalField(decimal_places=6, max_digits=16)),
                ("high_price", models.DecimalField(decimal_places=6, max_digits=16)),
                ("low", models.DecimalField(decimal_places=6, max_digits=16)),
                ("close", models.DecimalField(decimal_places=6, max_digits=16)),
                ("adj_close", models.DecimalField(decimal_places=6, max_digits=16)),
                ("volume", models.PositiveIntegerField()),
                (
                    "security",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_%(app_label)s",
                        to="data.security",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DailyUpdate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(auto_now_add=True)),
                (
                    "security",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_%(app_label)s",
                        to="data.security",
                    ),
                ),
            ],
            options={
                "ordering": ["security"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Daily",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("open_price", models.DecimalField(decimal_places=6, max_digits=16)),
                ("high_price", models.DecimalField(decimal_places=6, max_digits=16)),
                ("low", models.DecimalField(decimal_places=6, max_digits=16)),
                ("close", models.DecimalField(decimal_places=6, max_digits=16)),
                ("adj_close", models.DecimalField(decimal_places=6, max_digits=16)),
                ("volume", models.PositiveIntegerField()),
                (
                    "security",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_%(app_label)s",
                        to="data.security",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="weeklyupdate",
            constraint=models.UniqueConstraint(
                fields=("security", "date"), name="unique_sec_update_weekly_combination"
            ),
        ),
        migrations.AddConstraint(
            model_name="weekly",
            constraint=models.UniqueConstraint(
                fields=("security", "date"), name="unique_sec_date_weekly_combination"
            ),
        ),
        migrations.AddConstraint(
            model_name="security",
            constraint=models.UniqueConstraint(
                fields=("symbol", "data_provider"),
                name="unique_symbol_data_provider_combination",
            ),
        ),
        migrations.AddConstraint(
            model_name="monthlyupdate",
            constraint=models.UniqueConstraint(
                fields=("security", "date"),
                name="unique_sec_update_monthly_combination",
            ),
        ),
        migrations.AddConstraint(
            model_name="monthly",
            constraint=models.UniqueConstraint(
                fields=("security", "date"), name="unique_sec_date_monthly_combination"
            ),
        ),
        migrations.AddConstraint(
            model_name="dailyupdate",
            constraint=models.UniqueConstraint(
                fields=("security", "date"), name="unique_sec_update_daily_combination"
            ),
        ),
        migrations.AddConstraint(
            model_name="daily",
            constraint=models.UniqueConstraint(
                fields=("security", "date"), name="unique_sec_date_daily_combination"
            ),
        ),
    ]
